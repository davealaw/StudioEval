{"id": "q_1", "question": "A legacy REST endpoint in production returns HTTP 500 because a new client is sending JSON with duplicate keys. The original Python handler uses json.loads(request.body). Which single-line fix keeps backward-compatibility and strictly rejects duplicates?", "choices": {"A": "json.loads(request.body, strict=False)", "B": "json.loads(request.body, object_pairs_hook=dict)", "C": "json.loads(request.body, object_pairs_hook=lambda pairs: pairs if len(pairs)==len(dict(pairs)) else (_ for _ in ()).throw(ValueError))", "D": "json.loads(request.body).setdefault()"}, "answer": "C", "difficulty": "hard"}
{"id": "q_2", "question": "You are asked to speed up a Django ORM query that does for user in User.objects.all(): user.profile.refresh_from_db() inside a view. Which change gives the largest latency reduction without changing the produced data?", "choices": {"A": "Add .select_related('profile') to the original queryset", "B": "Add .prefetch_related('profile') to the original queryset", "C": "Replace the loop with User.objects.update()", "D": "Enable Django's @transaction.atomic on the view"}, "answer": "A", "difficulty": "medium"}
{"id": "q_3", "question": "A Python CLI tool uses multiprocessing.Pool to parallelize CPU-bound work. On Windows it crashes with RuntimeError: context has already been set. Which single change fixes the error and keeps the same concurrency model?", "choices": {"A": "Guard the pool creation with if __name__ == '__main__':", "B": "Switch to concurrent.futures.ThreadPoolExecutor", "C": "Use multiprocessing.set_start_method('fork')", "D": "Add freeze_support() after creating the pool"}, "answer": "A", "difficulty": "medium"}
{"id": "q_4", "question": "A Node.js 18+ service leaks memory when handling large file uploads via Express. Investigation shows resident set size grows ~1 MB per request. Which one-line patch eliminates the leak?", "choices": {"A": "app.use(express.json({limit:'10mb'}))", "B": "req.on('data', ()=>{}) to drain the stream", "C": "req.on('end', ()=>req.destroy())", "D": "app.use(express.raw({type:'*/*'}))"}, "answer": "C", "difficulty": "medium"}
{"id": "q_5", "question": "Your team stores logs in a compressed S3 bucket. A Python Lambda needs to read only the last 100 lines of a 5 GB .gz file efficiently. Given the Lambda's 15-minute limit and memory constraints, which approach is most practical?", "choices": {"A": "Use gzip.open(s3_object.get()['Body']) and deque(..., 100)", "B": "Use S3 select with SELECT * FROM s3object LIMIT 100", "C": "Pre-process logs with an index file for fast seeking", "D": "Stream the entire file and keep only the last 100 lines"}, "answer": "C", "difficulty": "medium"}
{"id": "q_6", "question": "A React component re-renders continuously even though props do not change. The culprit is const style = { width: props.width } inside the render method. Which fix prevents the loop?", "choices": {"A": "Move style into useState", "B": "Wrap style with useMemo(() => ({ width: props.width }), [props.width])", "C": "Use React.memo on the parent component", "D": "Change the prop name to widthPx"}, "answer": "B", "difficulty": "medium"}
{"id": "q_7", "question": "A C# service reads messages from Kafka and writes to SQL Server. Occasionally duplicate messages are processed, violating the primary key. Which idempotent strategy requires no schema changes?", "choices": {"A": "Use Kafka transactional producer", "B": "Store message offsets in SQL and skip if seen", "C": "Switch to exactly-once semantics in Kafka Streams", "D": "Add a Redis lock around the insert"}, "answer": "B", "difficulty": "medium"}
{"id": "q_8", "question": "A Go HTTP server panics with concurrent map writes when multiple goroutines update a global cache map. Which minimal change fixes the race?", "choices": {"A": "Replace the map with sync.Map", "B": "Guard every map access with sync.Mutex", "C": "Add GOMAXPROCS=1", "D": "Use atomic.Value"}, "answer": "A", "difficulty": "medium"}
{"id": "q_9", "question": "A Java Spring Boot endpoint times out for large CSV uploads. Investigation shows the controller loads the entire file into memory. Which single annotation or property change enables true streaming?", "choices": {"A": "@RequestMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)", "B": "Use MultipartFile.transferTo()", "C": "Change servlet to @RequestPart InputStream body", "D": "Set spring.servlet.multipart.max-file-size=50MB"}, "answer": "C", "difficulty": "medium"}
{"id": "q_10", "question": "Python 3.9+ code uses datetime.utcnow() for timestamps, but the logging team now requires ISO-8601 strings with local timezone offset. Which change produces correct offset-aware strings?", "choices": {"A": "datetime.now().isoformat()", "B": "datetime.utcnow().astimezone().isoformat()", "C": "datetime.now(timezone.utc).isoformat()", "D": "datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()"}, "answer": "B", "difficulty": "medium"}
{"id": "q_11", "question": "A Rust CLI tool needs to read a 10 GB CSV file, filter rows where column 3 > 100, and write the result. Which crates combination yields the fastest end-to-end run?", "choices": {"A": "csv + rayon parallel iterators", "B": "xsv binary already optimized", "C": "polars lazy frame with streaming", "D": "grep + awk via std::process::Command"}, "answer": "C", "difficulty": "medium"}
{"id": "q_12", "question": "A shell script uses grep -R 'TODO' . | wc -l to count TODOs but also matches binary files, inflating the count. Which one-flag addition fixes the count?", "choices": {"A": "grep -RI 'TODO' . | wc -l", "B": "grep -R --exclude-dir=.git 'TODO' . | wc -l", "C": "grep -R --binary-files=without-match 'TODO' . | wc -l", "D": "grep -R --text 'TODO' . | wc -l"}, "answer": "C", "difficulty": "easy"}
{"id": "q_13", "question": "An Android app using Kotlin crashes with NetworkOnMainThreadException while calling Retrofit synchronously in onCreate. Which minimal change keeps the call synchronous yet compliant?", "choices": {"A": "Wrap with AsyncTask", "B": "Use runBlocking { ... } in Kotlin", "C": "Switch to RxJava Single", "D": "Use Retrofit's enqueue"}, "answer": "B", "difficulty": "medium"}
{"id": "q_14", "question": "A Python property is accidentally called on the class instead of an instance, raising TypeError. Which decorator fixes this and keeps both class and instance access valid?", "choices": {"A": "@staticmethod", "B": "@classmethod", "C": "functools.cached_property", "D": "property already handles both"}, "answer": "B", "difficulty": "easy"}
{"id": "q_15", "question": "In Terraform you need to create an S3 bucket that never allows public read, even via ACLs. Which single resource configuration enforces this?", "choices": {"A": "aws_s3_bucket_public_access_block with block_public_acls=true", "B": "ACL private only", "C": "IAM bucket policy Deny s3:GetObject *", "D": "Bucket encryption with KMS"}, "answer": "A", "difficulty": "easy"}
{"id": "q_16", "question": "A Kubernetes job runs nightly but occasionally fails because a node is preempted. Which manifest change makes the job resilient to node loss?", "choices": {"A": "Set restartPolicy: OnFailure", "B": "Use CronJob instead of Job", "C": "Add tolerations for preemption", "D": "Increase activeDeadlineSeconds"}, "answer": "A", "difficulty": "easy"}
{"id": "q_17", "question": "A JavaScript function parseJson(str) uses eval(str) for legacy reasons. You must secure it against arbitrary code execution while preserving JSON parsing. Which replacement is safe and minimal?", "choices": {"A": "new Function('return '+str)()", "B": "JSON.parse(str)", "C": "eval('('+str+')') in strict mode", "D": "vm.runInNewContext(str)"}, "answer": "B", "difficulty": "easy"}
{"id": "q_18", "question": "A Ruby on Rails query User.where('created_at > ?', 1.month.ago) is slow even though the column is indexed. EXPLAIN shows a seq scan. Which change forces the index usage?", "choices": {"A": "User.where('created_at > ?', 1.month.ago).order(:created_at)", "B": "Add FORCE INDEX (index_users_on_created_at)", "C": "Cast to date: created_at::date", "D": "Use User.where(created_at: 1.month.ago..)"}, "answer": "D", "difficulty": "medium"}
{"id": "q_19", "question": "A CSS grid layout breaks on iOS 13 Safari only. The culprit is grid-template-columns: repeat(auto-fit, minmax(200px,1fr)). Which fallback fixes iOS without altering modern browsers?", "choices": {"A": "@supports not (grid-auto-fit) { use flexbox }", "B": "Add display:-ms-grid prefixes", "C": "Use repeat(auto-fill, 200px)", "D": "Add -webkit-grid-template-columns"}, "answer": "A", "difficulty": "medium"}
{"id": "q_20", "question": "A SwiftUI view re-renders excessively because @State var items is mutated inside a loop. Which pattern prevents the extra renders?", "choices": {"A": "Collect changes in a local var then assign once", "B": "Use @ObservedObject instead", "C": "Replace with @Binding", "D": "Dispatch to main queue async"}, "answer": "A", "difficulty": "easy"}
{"id": "q_21", "question": "A Docker image size jumped from 100 MB to 1 GB after adding ML libraries. Which single Dockerfile change shrinks the image most without functionality loss?", "choices": {"A": "Switch base image from python:3.9 to python:3.9-slim", "B": "Add RUN apt-get clean", "C": "Use multi-stage build and copy only wheel files", "D": "Add .dockerignore"}, "answer": "C", "difficulty": "medium"}
{"id": "q_22", "question": "A Go test fails intermittently with -race reporting write-write races on a map. The map is read-only after init. Which fix is idiomatic?", "choices": {"A": "Make the map a sync.Map", "B": "Populate the map before spawning goroutines", "C": "Use atomic.Value", "D": "Add mutex.Lock() around reads"}, "answer": "B", "difficulty": "easy"}
{"id": "q_23", "question": "A Java microservice uses Executors.newFixedThreadPool(100) yet runs out of memory under load. Which replacement bounds resource usage?", "choices": {"A": "Executors.newCachedThreadPool()", "B": "ForkJoinPool.commonPool()", "C": "Use ThreadPoolExecutor with bounded LinkedBlockingQueue and CallerRunsPolicy", "D": "Increase -Xmx"}, "answer": "C", "difficulty": "medium"}
{"id": "q_24", "question": "A TypeScript codebase has any everywhere. Which compiler flag upgrade enforces strict null checks with minimal code changes?", "choices": {"A": "--noImplicitAny", "B": "--strictNullChecks", "C": "--exactOptionalPropertyTypes", "D": "--noUncheckedIndexedAccess"}, "answer": "A", "difficulty": "easy"}
{"id": "q_25", "question": "In SQL Server a stored procedure uses SELECT * FROM OPENJSON(@json) but fails when JSON is > 2 GB. Which change supports arbitrary size?", "choices": {"A": "Use nvarchar(max) variable", "B": "Use OPENJSON without schema", "C": "Insert JSON into temp table then query", "D": "Enable MAX_JSON_SIZE server setting"}, "answer": "C", "difficulty": "medium"}
{"id": "q_26", "question": "A Python Flask endpoint returns 413 when clients POST > 1 MB JSON. Which config key increase fixes this?", "choices": {"A": "MAX_CONTENT_LENGTH", "B": "JSONIFY_PRETTYPRINT_REGULAR", "C": "MAX_FORM_MEMORY_SIZE", "D": "MAX_COOKIE_SIZE"}, "answer": "A", "difficulty": "easy"}
{"id": "q_27", "question": "A React Native app crashes on Android with SoLoader: couldn't find DSO for a native module. Which Gradle change fixes the build?", "choices": {"A": "android.bundle.enableSplit=false", "B": "packagingOptions { pickFirst 'lib/**' }", "C": "Add missingDimensionStrategy", "D": "Enable Hermes"}, "answer": "B", "difficulty": "medium"}
{"id": "q_28", "question": "A C++17 lambda captures this by value [=]() causing lifetime issues. Which capture fixes it?", "choices": {"A": "[this](){}", "B": "[*this](){}", "C": "[&](){}", "D": "[=, this](){}"}, "answer": "B", "difficulty": "medium"}
{"id": "q_29", "question": "A Django migration wants to add a non-nullable JSONField to an existing table with millions of rows. Which migration strategy avoids long table locks?", "choices": {"A": "Add nullable, backfill, then alter to non-null", "B": "Use RunSQL with ALTER TABLE ... ADD COLUMN", "C": "Create new table and swap", "D": "Use CONCURRENTLY on PostgreSQL"}, "answer": "A", "difficulty": "medium"}
{"id": "q_30", "question": "An AWS Lambda in Python imports a 50 MB ML model on every cold start. Which change minimizes cold-start latency?", "choices": {"A": "Enable Lambda layers and load in /opt", "B": "Increase memory to 3 GB", "C": "Use provisioned concurrency", "D": "Zip the model with code"}, "answer": "C", "difficulty": "medium"}
{"id": "q_31", "question": "A Git pre-commit hook rejects commits if tests fail, but developers bypass with --no-verify. Which single server-side setting enforces the check?", "choices": {"A": "pre-receive hook", "B": "update hook", "C": "GitHub branch protection status check", "D": "post-commit hook"}, "answer": "A", "difficulty": "easy"}
{"id": "q_32", "question": "A Python 3.9+ regex re.match(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', s) rejects valid leap-day dates. Which pattern adds correctness without full validation?", "choices": {"A": "^[0-9]{4}-02-29$", "B": "^[0-9]{4}-(02-(0[1-9]|[12][0-9]))$", "C": "Keep regex simple, validate with datetime.strptime", "D": "Use ^[0-9]{4}-(0[13578]|1[02])-31$"}, "answer": "C", "difficulty": "easy"}
{"id": "q_33", "question": "A JavaScript micro-benchmark in V8 shows new Map is slower than {} for 10 keys. Which explanation is most likely?", "choices": {"A": "Map hashing overhead", "B": "Hidden class transitions", "C": "JIT deopt due to polymorphism", "D": "V8 optimizes small objects as fast properties"}, "answer": "D", "difficulty": "medium"}
{"id": "q_34", "question": "In MongoDB an aggregation pipeline times out on a sharded cluster. Which single change prevents the timeout?", "choices": {"A": "Add {allowDiskUse:true}", "B": "Use hint with shard key", "C": "Increase maxTimeMS", "D": "Use $match early"}, "answer": "A", "difficulty": "easy"}
{"id": "q_35", "question": "A React useEffect runs on every render even though its dependency array is empty. Which mistake causes this?", "choices": {"A": "Arrow function in deps", "B": "Forgot to return cleanup", "C": "Defined inside component", "D": "ESLint rule disabled"}, "answer": "A", "difficulty": "easy"}
{"id": "q_36", "question": "A C program crashes with double free or corruption only on glibc 2.34+. Valgrind shows invalid reads. Which compile flag helps locate the bug?", "choices": {"A": "-fsanitize=address", "B": "-g -O0", "C": "-D_FORTIFY_SOURCE=2", "D": "-static"}, "answer": "A", "difficulty": "medium"}
{"id": "q_37", "question": "A Terraform module outputs an S3 bucket ARN but consumers need the regional domain name. Which interpolation constructs it?", "choices": {"A": "arn:aws:s3:::${bucket}/${region}", "B": "${bucket}.s3.${region}.amazonaws.com", "C": "aws_s3_bucket.bucket.bucket_regional_domain_name", "D": "format(\"%s.s3.amazonaws.com\", bucket)"}, "answer": "B", "difficulty": "easy"}
{"id": "q_38", "question": "A Python dataclass uses __slots__ but pickling fails. Which method combination fixes it?", "choices": {"A": "__getstate__/__setstate__", "B": "dataclasses.dataclass(slots=True) in 3.10+", "C": "import pickle; pickle.HIGHEST_PROTOCOL", "D": "__reduce__ returning class and args"}, "answer": "D", "difficulty": "medium"}
{"id": "q_39", "question": "A Kotlin coroutine leaks memory when GlobalScope.launch is used in Android. Which scope replacement is lifecycle-aware?", "choices": {"A": "lifecycleScope", "B": "viewModelScope", "C": "MainScope()", "D": "CoroutineScope(Dispatchers.IO)"}, "answer": "A", "difficulty": "easy"}
{"id": "q_40", "question": "A CSS animation transform: translateX(100%) appears to jump on high-DPI screens. Which unit fixes the sub-pixel jitter?", "choices": {"A": "100vw", "B": "translateX(calc(100vw * 1))", "C": "translateX(100%) with will-change: transform", "D": "Use px instead of %"}, "answer": "D", "difficulty": "easy"}
{"id": "q_41", "question": "A Bash script uses set -e but needs to ignore errors from a specific command. Which idiom keeps set -e active?", "choices": {"A": "cmd || true", "B": "cmd; true", "C": "set +e; cmd; set -e", "D": "if ! cmd; then :; fi"}, "answer": "A", "difficulty": "easy"}
{"id": "q_42", "question": "A Java method void foo(List<Integer> list) receives an ArrayList<Integer> but modifying it causes UnsupportedOperationException. Which cause is most likely?", "choices": {"A": "List is wrapped by Collections.unmodifiableList", "B": "List came from Arrays.asList", "C": "List is List.of(...) in Java 9+", "D": "List is a sublist"}, "answer": "A", "difficulty": "medium"}
{"id": "q_43", "question": "A Node.js 16+ app uses sharp to resize images and crashes with ENOMEM. Which single environment variable mitigates it?", "choices": {"A": "UV_THREADPOOL_SIZE=128", "B": "NODE_OPTIONS=--max-old-space-size=4096", "C": "SHARP_CONCURRENCY=1", "D": "LIBVIPS_DISC_THRESHOLD=500m"}, "answer": "C", "difficulty": "medium"}
{"id": "q_44", "question": "A Python async function async def fetch(url) is invoked inside a synchronous context. Which call is safe and non-blocking?", "choices": {"A": "asyncio.run(fetch(url))", "B": "asyncio.create_task(fetch(url))", "C": "asyncio.get_event_loop().run_until_complete(fetch(url))", "D": "loop.call_soon_threadsafe(fetch(url))"}, "answer": "A", "difficulty": "easy"}
{"id": "q_45", "question": "A React Context provider re-renders all consumers when a non-relevant value changes. Which pattern prevents this?", "choices": {"A": "Split contexts by concern", "B": "Memoize provider value with useMemo", "C": "Use React.memo on consumers", "D": "Lift state up"}, "answer": "A", "difficulty": "medium"}
{"id": "q_46", "question": "A Kubernetes Pod shows CrashLoopBackOff with exit code 137. Which resource limit is most likely exceeded?", "choices": {"A": "CPU limit", "B": "Memory limit", "C": "Ephemeral storage", "D": "PID limit"}, "answer": "B", "difficulty": "easy"}
{"id": "q_47", "question": "In SQL Server a query SELECT * FROM logs WHERE message LIKE '%error%' is slow. Which indexed view approach accelerates wildcard prefix search?", "choices": {"A": "Create full-text index on message", "B": "Add computed column with REVERSE(message) and index", "C": "Use CHARINDEX instead of LIKE", "D": "Partition table by message"}, "answer": "A", "difficulty": "medium"}
{"id": "q_48", "question": "A Python decorator @timing prints elapsed time but breaks when applied to async def. Which change makes it work for both sync and async?", "choices": {"A": "Check inspect.iscoroutinefunction and await", "B": "Use functools.wraps", "C": "Rely on time.perf_counter", "D": "Use asyncio.ensure_future"}, "answer": "A", "difficulty": "medium"}
{"id": "q_49", "question": "A Java Spring bean is annotated @Transactional but updates do not rollback on checked exceptions. Which attribute fixes it?", "choices": {"A": "rollbackFor=Exception.class", "B": "noRollbackFor=RuntimeException.class", "C": "propagation=REQUIRES_NEW", "D": "readOnly=true"}, "answer": "A", "difficulty": "medium"}
{"id": "q_50", "question": "A CSS file main.css is cached aggressively by CloudFront. Which cache-busting technique preserves old URLs during rolling deploys?", "choices": {"A": "Add query string ?v=hash", "B": "Rename file to main.hash.css", "C": "Set Cache-Control: no-cache", "D": "Use ETag"}, "answer": "B", "difficulty": "easy"}
{"id": "q_51", "question": "A Python unit test mocks requests.get but asserts are not triggered. Which patch target is correct?", "choices": {"A": "patch('requests.get')", "B": "patch('mymodule.requests.get')", "C": "patch.object(requests, 'get')", "D": "patch('builtins.requests.get')"}, "answer": "B", "difficulty": "medium"}
{"id": "q_52", "question": "A MySQL 8.0+ query uses GROUP BY and returns ONLY_FULL_GROUP_BY error. Which SQL mode change disables the strict check?", "choices": {"A": "SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''))", "B": "Add ANY_VALUE() to non-aggregated columns", "C": "Rewrite query with subselect", "D": "Use ROLLUP"}, "answer": "A", "difficulty": "easy"}
{"id": "q_53", "question": "A C# LINQ query items.Where(x => x.Id > 0).ToList() throws NullReferenceException. Which null-safety operator fixes it?", "choices": {"A": "items?.Where(...)", "B": "items!.Where(...)", "C": "items.Where(x => x?.Id > 0 ?? false)", "D": "items.Where(x => x != null && x.Id > 0)"}, "answer": "D", "difficulty": "medium"}
{"id": "q_54", "question": "An Android app using Room database fails at runtime with Cannot figure out how to save this field into database. Which annotation resolves it?", "choices": {"A": "@TypeConverters", "B": "@Embedded", "C": "@Ignore", "D": "@ColumnInfo"}, "answer": "A", "difficulty": "medium"}
{"id": "q_55", "question": "A Bash pipeline cat big.log | grep error | head exits early but leaves grep running. Which change ensures all processes exit cleanly?", "choices": {"A": "grep error big.log | head", "B": "set -o pipefail", "C": "grep --line-buffered error big.log | head", "D": "Use tail -f"}, "answer": "A", "difficulty": "easy"}
{"id": "q_56", "question": "A Python logger prints twice. Root cause is logging.basicConfig called twice. Which check prevents duplicate handlers?", "choices": {"A": "force=False", "B": "handlers=[]", "C": "Check if not logging.root.handlers:", "D": "logging.shutdown()"}, "answer": "C", "difficulty": "easy"}
{"id": "q_57", "question": "A CSS flex container has justify-content: space-between but last row items stretch. Which rule aligns leftover items to the left?", "choices": {"A": "justify-content: flex-start", "B": "Add ::after { flex: auto }", "C": "Use margin-left: auto on items", "D": "Switch to CSS grid"}, "answer": "B", "difficulty": "medium"}
{"id": "q_58", "question": "A Node.js stream in flowing mode consumes 100% CPU. Which call pauses it?", "choices": {"A": "stream.pause()", "B": "stream.read()", "C": "stream.on('data', ()=>{})", "D": "stream.resume()"}, "answer": "A", "difficulty": "easy"}
{"id": "q_59", "question": "A Java servlet container logs SEVERE: Memory leak detected. Which listener cleans up ThreadLocal variables?", "choices": {"A": "ServletContextListener", "B": "HttpSessionListener", "C": "ServletRequestListener", "D": "ServletContextAttributeListener"}, "answer": "A", "difficulty": "medium"}
{"id": "q_60", "question": "A Python 3.7+ dataclass field should be excluded from asdict() but kept in __repr__. Which field parameter achieves this?", "choices": {"A": "repr=False, compare=False", "B": "field(repr=True, exclude={'asdict'})", "C": "field(repr=True) with custom asdict_factory", "D": "field(repr=True) cannot be excluded"}, "answer": "C", "difficulty": "medium"}
{"id": "q_61", "question": "A SQL query SELECT * FROM orders WHERE created_at >= NOW() - INTERVAL 1 DAY returns different results in different timezones. Which expression keeps UTC?", "choices": {"A": "created_at >= NOW() AT TIME ZONE 'UTC' - INTERVAL 1 DAY", "B": "created_at >= (NOW() AT TIME ZONE 'UTC') - INTERVAL 1 DAY", "C": "created_at >= (CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - INTERVAL 1 DAY", "D": "created_at >= NOW() - INTERVAL '1 day'"}, "answer": "B", "difficulty": "medium"}
{"id": "q_62", "question": "A React component uses useRef to store a mutable array, but the ref changes identity on every render. Which hook preserves identity?", "choices": {"A": "useCallback", "B": "useMemo(() => ref, [])", "C": "useRef already stable", "D": "useState(() => [])"}, "answer": "C", "difficulty": "easy"}
{"id": "q_63", "question": "A JavaScript setInterval keeps running even after component unmount. Which cleanup is correct in useEffect?", "choices": {"A": "Return a function that calls clearInterval(id)", "B": "Store interval id in state", "C": "Use useRef for interval id", "D": "Use setTimeout instead"}, "answer": "A", "difficulty": "easy"}
{"id": "q_64", "question": "A Git merge produces CONFLICT (content) but git diff shows nothing. Which command reveals the conflict markers?", "choices": {"A": "git diff --cached", "B": "git diff HEAD", "C": "git diff --check", "D": "git checkout --theirs"}, "answer": "C", "difficulty": "easy"}
{"id": "q_65", "question": "A Python async generator async def gen() is iterated with for item in gen() causing TypeError. Which syntax is correct?", "choices": {"A": "async for item in gen()", "B": "await gen()", "C": "list(gen())", "D": "gen().__aiter__()"}, "answer": "A", "difficulty": "easy"}
{"id": "q_66", "question": "A C++14 lambda [x = std::move(vec)]{} fails to compile inside another lambda. Which capture fixes it?", "choices": {"A": "[x = std::move(vec)]() mutable", "B": "[&x = vec]", "C": "[x = vec]", "D": "[x{std::move(vec)}]"}, "answer": "D", "difficulty": "medium"}
{"id": "q_67", "question": "A JavaScript application needs to add retry logic with exponential backoff to native fetch() calls. Which library specifically extends fetch with retry policies?", "choices": {"A": "fetch-retry", "B": "node-fetch", "C": "cross-fetch", "D": "whatwg-fetch"}, "answer": "A", "difficulty": "medium"}
{"id": "q_68", "question": "A Python script uses subprocess.run(cmd, shell=True) and fails on spaces in filenames. Which change safely handles arguments?", "choices": {"A": "Use subprocess.run(cmd, shell=False) with list argument", "B": "Quote filenames with shlex.quote", "C": "Use os.system", "D": "Replace spaces with underscores"}, "answer": "A", "difficulty": "medium"}
{"id": "q_69", "question": "A CSS position: sticky header stops sticking inside a transformed parent. Which CSS feature causes this?", "choices": {"A": "Transform creates new containing block", "B": "overflow: hidden on parent", "C": "z-index stacking context", "D": "display: flex on parent"}, "answer": "A", "difficulty": "medium"}
{"id": "q_70", "question": "A Rust function async fn f() -> Result<(), Box<dyn Error>> is called from main. Which macro starts the runtime?", "choices": {"A": "#[tokio::main]", "B": "#[async_std::main]", "C": "tokio::runtime::Runtime::new()?.block_on(f())", "D": "f().await in main"}, "answer": "A", "difficulty": "easy"}
{"id": "q_71", "question": "A Vue.js 3+ watcher on an array does not trigger on push. Which option enables deep watching?", "choices": {"A": "watch(arr, handler, { deep: true })", "B": "Use Vue.set", "C": "Replace array with new reference", "D": "Use computed property"}, "answer": "A", "difficulty": "medium"}
{"id": "q_72", "question": "A SQL UNION query returns duplicates. Which set operator removes them?", "choices": {"A": "UNION ALL", "B": "UNION DISTINCT", "C": "UNION already removes duplicates", "D": "Add GROUP BY"}, "answer": "C", "difficulty": "easy"}
{"id": "q_73", "question": "A Python Enum needs to serialize to JSON as its value. Which approach enables this?", "choices": {"A": "IntEnum", "B": "str, Enum and override __str__", "C": "json.dumps(enum_instance, default=lambda o: o.value)", "D": "Enum cannot be JSON serializable"}, "answer": "C", "difficulty": "easy"}
{"id": "q_74", "question": "A Kubernetes ConfigMap exceeds 1 MB and cannot be applied. Which alternative is recommended?", "choices": {"A": "Split into multiple ConfigMaps", "B": "Use a PVC", "C": "Store in external secrets manager", "D": "Use S3 and init container"}, "answer": "A", "difficulty": "easy"}
{"id": "q_75", "question": "A JavaScript Proxy traps get but breaks console.log(obj). Which trap restores default logging?", "choices": {"A": "getOwnPropertyDescriptor", "B": "ownKeys", "C": "toString", "D": "Symbol.toPrimitive"}, "answer": "B", "difficulty": "medium"}
{"id": "q_76", "question": "A Python pandas.read_csv fails on mixed-type columns. Which dtype argument forces string parsing?", "choices": {"A": "dtype=str", "B": "dtype='object'", "C": "converters={col: str}", "D": "low_memory=False"}, "answer": "A", "difficulty": "easy"}
{"id": "q_77", "question": "A C# async Task Main exits before completion. Which await pattern ensures all tasks finish?", "choices": {"A": "await Task.WhenAll(tasks)", "B": "Task.WaitAll(tasks)", "C": "await Task.Run(() => Task.WaitAll(tasks))", "D": "Console.ReadKey()"}, "answer": "A", "difficulty": "medium"}
{"id": "q_78", "question": "A CSS calc() expression width: calc(100% - 10px) is ignored in Safari 12. Which syntax works across browsers?", "choices": {"A": "width: calc(100% - 10px); with space around minus", "B": "width: calc(100%-10px)", "C": "width: -webkit-calc(100% - 10px)", "D": "Use flex: 1 instead"}, "answer": "A", "difficulty": "easy"}
{"id": "q_79", "question": "A Rust struct deriving Serialize contains an Rc<dyn Trait> which fails. Which wrapper enables serialization?", "choices": {"A": "Box<dyn Trait>", "B": "#[serde(skip)]", "C": "erased-serde crate", "D": "RefCell<dyn Trait>"}, "answer": "C", "difficulty": "medium"}
{"id": "q_80", "question": "A Python asyncio.gather swallows exceptions. Which flag surfaces them?", "choices": {"A": "return_exceptions=True", "B": "await asyncio.gather(*tasks, return_exceptions=False)", "C": "Catch asyncio.CancelledError", "D": "Use asyncio.wait"}, "answer": "B", "difficulty": "medium"}
{"id": "q_81", "question": "A Kubernetes service exposes port 80 but targets port 8080 on pods. Which spec field maps them?", "choices": {"A": "targetPort: 8080", "B": "port: 8080", "C": "nodePort: 8080", "D": "containerPort: 8080"}, "answer": "A", "difficulty": "easy"}
{"id": "q_82", "question": "A JavaScript Map loses key equality for objects. Which method compares by reference?", "choices": {"A": "JSON.stringify keys", "B": "Use WeakMap", "C": "Map already uses object identity", "D": "Override toString"}, "answer": "C", "difficulty": "easy"}
{"id": "q_83", "question": "Which Python statement is safest for catching and logging all exceptions including KeyboardInterrupt?", "choices": {"A": "except Exception as e", "B": "except BaseException as e", "C": "except:", "D": "except (Exception, BaseException) as e"}, "answer": "B", "difficulty": "medium"}
{"id": "q_84", "question": "Your async Python service intermittently hangs. Which tool helps identify blocked coroutines?", "choices": {"A": "pdb", "B": "strace", "C": "asyncio.Task.all_tasks()", "D": "timeit"}, "answer": "C", "difficulty": "medium"}
{"id": "q_85", "question": "A Flask app crashes on large payloads. Which config change most directly addresses the issue?", "choices": {"A": "Increase app.config['JSONIFY_PRETTYPRINT_REGULAR']", "B": "Use a reverse proxy like nginx", "C": "Set MAX_CONTENT_LENGTH", "D": "Use Flask-Caching"}, "answer": "C", "difficulty": "easy"}
{"id": "q_86", "question": "What is the main drawback of monkey-patching a third-party library in production?", "choices": {"A": "Reduces memory usage", "B": "Improves readability", "C": "Increases upgrade risks", "D": "Reduces API calls"}, "answer": "C", "difficulty": "medium"}
{"id": "q_87", "question": "Which approach best avoids a race condition when accessing a shared file?", "choices": {"A": "Using a semaphore", "B": "Using an in-memory cache", "C": "Delaying access by 100ms", "D": "Wrapping access in a try-except"}, "answer": "A", "difficulty": "hard"}
{"id": "q_88", "question": "In Python, which statement prevents memory leaks in generator-based pipelines?", "choices": {"A": "yield from", "B": "gc.collect()", "C": "del generator", "D": "close() on generator"}, "answer": "D", "difficulty": "medium"}
{"id": "q_89", "question": "What is the most secure way to store a secret API key in a Python web app?", "choices": {"A": "Hardcode in a config file", "B": "Use a .env file with dotenv", "C": "Print it at runtime", "D": "Encrypt it with MD5"}, "answer": "B", "difficulty": "easy"}
{"id": "q_90", "question": "Which change is most appropriate when a Kubernetes pod frequently OOMs (out-of-memory)?", "choices": {"A": "Add liveness probe", "B": "Reduce replica count", "C": "Increase memory limits", "D": "Switch from ConfigMap to Secret"}, "answer": "C", "difficulty": "medium"}
{"id": "q_91", "question": "Which approach makes a Django query faster when filtering on a foreign key?", "choices": {"A": "Use .only()", "B": "Use .values_list()", "C": "Use select_related()", "D": "Use .defer()"}, "answer": "C", "difficulty": "medium"}
{"id": "q_92", "question": "You need to run an expensive nightly ETL job in Kubernetes without starving web pods of CPU. Which scheduling object guarantees the ETL pod gets at least 2 full cores while web pods keep their existing QoS?", "choices": {"A": "ResourceQuota", "B": "PriorityClass with preemptionPolicy: Never", "C": "PodDisruptionBudget", "D": "NodeSelector with dedicated node label"}, "answer": "B", "difficulty": "hard"}
{"id": "q_93", "question": "A Python AWS Lambda times out after 3 min while uploading a 5 GB file to S3. Which single change lets the upload continue after the Lambda returns?", "choices": {"A": "Increase Lambda timeout to 15 min", "B": "Use S3 multipart upload with presigned URLs returned to the client", "C": "Increase Lambda memory", "D": "Enable Lambda async invoke retry"}, "answer": "B", "difficulty": "hard"}
{"id": "q_94", "question": "A React app using React-Router v6 shows a blank page on refresh when served from a static CDN. Which server-side fix is the simplest and keeps client-side routing intact?", "choices": {"A": "Convert to server-side rendering", "B": "Add a catch-all route that serves index.html", "C": "Use HashRouter instead", "D": "Disable browser cache"}, "answer": "B", "difficulty": "medium"}
{"id": "q_95", "question": "Your Go service leaks goroutines because a `context.Context` is never cancelled in a long-lived worker pool. Which pattern prevents the leak?", "choices": {"A": "Use `context.TODO()`", "B": "Create a new context per task with timeout and defer cancel()", "C": "Use `context.WithValue`", "D": "Call `runtime.GOMAXPROCS()`"}, "answer": "B", "difficulty": "hard"}
{"id": "q_96", "question": "A PostgreSQL `btree` index on `email(text)` performs poorly for `LIKE '%@domain.com'`. Which index type accelerates the suffix search?", "choices": {"A": "GIN with trigram extension", "B": "BRIN", "C": "Hash index", "D": "Expression index on `reverse(email)`"}, "answer": "A", "difficulty": "hard"}
{"id": "q_97", "question": "A Terraform remote state backend (S3 + DynamoDB) is accidentally deleted, corrupting the lock table. Which practice prevents total lock loss?", "choices": {"A": "Enable S3 versioning on the state bucket", "B": "Use local state instead", "C": "Set `dynamodb_table` with `billing_mode=PAY_PER_REQUEST`", "D": "Use `terraform force-unlock`"}, "answer": "A", "difficulty": "medium"}
{"id": "q_98", "question": "A C# ASP.NET Core endpoint streams 1 GB of data but allocates the entire byte[] first, causing LOH fragmentation. Which API enables true streaming without buffering?", "choices": {"A": "return File(byte[], \"application/octet-stream\")", "B": "return new FileStreamResult(stream, \"application/octet-stream\")", "C": "return Ok(byte[])", "D": "return Content(byte[].ToString())"}, "answer": "B", "difficulty": "hard"}
{"id": "q_99", "question": "A Node.js application hits `EMFILE` under load because file descriptors are never closed. Which tool pinpoints the exact call sites?", "choices": {"A": "console.trace", "B": "lsof", "C": "node --trace-warnings", "D": "async_hooks.createHook"}, "answer": "D", "difficulty": "hard"}
{"id": "q_100", "question": "A Rust `async` web handler panics with \"future cannot be sent between threads safely\". Which bound on the trait object fixes the error?", "choices": {"A": "dyn Future + 'static", "B": "dyn Future + Send", "C": "dyn Future + Sync", "D": "dyn Future + Unpin"}, "answer": "B", "difficulty": "hard"}
{"id": "q_101", "question": "Your Node.js 18+ server accepts TLS 1.0 handshakes. Which single-line option in the https.createServer call disables TLS 1.0 and 1.1 while keeping 1.2+?", "choices": {"A": "secureOptions: require('constants').SSL_OP_NO_TLSv1 | require('constants').SSL_OP_NO_TLSv1_1", "B": "minVersion: 'TLSv1.2'", "C": "ciphers: 'TLS_AES_256_GCM_SHA384'", "D": "ALPNProtocols: ['h2']"}, "answer": "B", "difficulty": "medium"}
{"id": "q_102", "question": "A Prometheus metric http_requests_total{user_id=\"12345\"} generates 40k series. Which relabel_config drop action removes the high-cardinality label?", "choices": {"A": "action: drop  source_labels: [__name__]  regex: 'http_requests_total'", "B": "action: labeldrop  regex: 'user_id'", "C": "action: keep  source_labels: [__name__]  regex: 'http_requests_total'", "D": "action: hashmod  source_labels: [user_id]  modulus: 10"}, "answer": "B", "difficulty": "medium"}
{"id": "q_103", "question": "A React site fails Lighthouse LCP at 5s due to a 2 MB hero image. Which single tag pre-loads the image with the highest priority?", "choices": {"A": "<img loading=\"lazy\" src=\"hero.jpg\">", "B": "<link rel=\"preload\" as=\"image\" href=\"hero.jpg\">", "C": "<link rel=\"prefetch\" href=\"hero.jpg\">", "D": "<img decoding=\"async\" src=\"hero.jpg\">"}, "answer": "B", "difficulty": "medium"}
{"id": "q_104", "question": "A Python C-extension segfaults when accessing a PyObject after releasing the GIL. Which macro pair re-acquires the GIL safely?", "choices": {"A": "Py_BEGIN_ALLOW_THREADS / Py_END_ALLOW_THREADS", "B": "PyGILState_Ensure() / PyGILState_Release()", "C": "PyEval_SaveThread() / PyEval_RestoreThread()", "D": "Py_INCREF(obj) / Py_DECREF(obj)"}, "answer": "B", "difficulty": "hard"}
{"id": "q_105", "question": "A BigQuery MERGE statement raises 'UPDATE/MERGE must match at most one source row per target row'. Which QUALIFY clause removes duplicates?", "choices": {"A": "QUALIFY ROW_NUMBER() OVER(PARTITION BY target.id ORDER BY source.updated_at DESC) = 1", "B": "QUALIFY COUNT(*) OVER(PARTITION BY target.id) = 1", "C": "QUALIFY RANK() OVER(PARTITION BY target.id) = 1", "D": "QUALIFY DENSE_RANK() OVER(PARTITION BY target.id) = 1"}, "answer": "A", "difficulty": "hard"}
{"id": "q_106", "question": "A Cloudflare Worker hits the 50ms CPU limit. Which API offloads heavy CPU work to a longer-lived environment?", "choices": {"A": "addEventListener('fetch', handler)", "B": "fetch('https://durable-object.my.workers.dev')", "C": "new WebAssembly.Module(bytes)", "D": "setTimeout(() => heavy(), 0)"}, "answer": "B", "difficulty": "medium"}
{"id": "q_107", "question": "A PostgreSQL table must auto-purge user rows 30 days after GDPR delete request. Which declarative feature achieves zero-lock removal?", "choices": {"A": "CREATE POLICY gdpr_purge ON users FOR DELETE USING (deleted_at <= NOW() - INTERVAL '30 days')", "B": "PARTITION BY RANGE (deleted_at) and DROP PARTITION daily", "C": "TRIGGER AFTER 30 DAYS DELETE", "D": "cron job DELETE FROM users WHERE deleted_at <= NOW() - INTERVAL '30 days'"}, "answer": "B", "difficulty": "hard"}
{"id": "q_108", "question": "An AWS IAM cross-account role trust policy fails with 'Invalid principal'. Which principal format should be used instead of AWS account ID?", "choices": {"A": "Principal: { Service: \"lambda.amazonaws.com\" }", "B": "Principal: { AWS: \"arn:aws:iam::123456789012:root\" }", "C": "Principal: \"*\"", "D": "Principal: { Federated: \"cognito-identity.amazonaws.com\" }"}, "answer": "B", "difficulty": "medium"}
{"id": "q_109", "question": "A Go HTTP client sees 502s from upstream. Which library adds exponential-backoff retry with jitter?", "choices": {"A": "http.Client{Timeout: 5*time.Second}", "B": "retryablehttp.NewClient()", "C": "http.Get(url)", "D": "httputil.NewSingleHostReverseProxy(target)"}, "answer": "B", "difficulty": "medium"}
{"id": "q_110", "question": "A PyTorch model fails to load with 'Expected object of device type cuda but got cpu'. Which torch.jit.load parameter forces CPU?", "choices": {"A": "torch.jit.load(path, map_location='cpu')", "B": "torch.jit.load(path).cpu()", "C": "torch.device('cpu')", "D": "CUDA_VISIBLE_DEVICES=\"\""}, "answer": "A", "difficulty": "medium"}